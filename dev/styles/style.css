@import '../styles/fonts.css';
.logo,
a,
a:hover,
li,
img,
input,
textarea,
.prev,
.next,
.popup__icon-close {
  transition: all 0.5s ease-in-out;
}
.list__number__element {
  transition: all 0.2s ease-in-out;
}
body {
  cursor: default;
  overflow-x: hidden !important;
}
a {
  cursor: pointer;
}
.color-red {
  color: #cd333f;
}
.color-blue {
  color: #195abc;
}
.left {
  float: left;
  margin: 0;
}
.right {
  float: right;
}
ul {
  -webkit-padding-start: 0px !important;
  -moz-padding-start: 0px !important;
}
.no-margin {
  margin: 0 !important;
  float: none !important;
}
/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
